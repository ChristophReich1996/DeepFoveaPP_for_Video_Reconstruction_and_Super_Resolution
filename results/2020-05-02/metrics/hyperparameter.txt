{"fft_discriminator_network_optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.1, 0.95)\n    eps: 1e-08\n    lr: 0.0001\n    weight_decay: 0\n)", "training_dataloader": "<torch.utils.data.dataloader.DataLoader object at 0x7fbc40089b38>", "generator_network": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.1, 0.95)\n    eps: 1e-08\n    lr: 0.0003\n    weight_decay: 0\n)", "validation_dataloader": "<torch.utils.data.dataloader.DataLoader object at 0x7fbc40089d68>", "discriminator_network": "DataParallel(\n  (module): Discriminator(\n    (input_block): InputBlock(\n      (learnable_downsampling): Conv2d(18, 18, kernel_size=(4, 4), stride=(4, 4))\n      (bilinear_downsampling): Upsample(scale_factor=0.25, mode=bilinear)\n    )\n    (blocks): ModuleList(\n      (0): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(6, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(6, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (1): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(64, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(64, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (2): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (3): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (4): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(128, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(1, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(128, 1, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n    )\n  )\n)", "perceptual_loss": "PerceptualLoss(\n  (loss_function): L1Loss()\n)", "test_dataloader": "None", "w_perceptual": "1.0", "flow_loss": "L1Loss()", "w_flow": "1.0", "w_supervised_loss": "1.0", "generator_network_optimizer": "DataParallel(\n  (module): RecurrentUNet(\n    (encoder_blocks): ModuleList(\n      (0): ResidualBlock(\n        (layer): Sequential(\n          (0): Conv2d(18, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv2d(18, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv2d(18, 32, kernel_size=(1, 1), stride=(1, 1))\n        (pooling): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n      )\n      (1): ResidualBlock(\n        (layer): Sequential(\n          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))\n        (pooling): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n      )\n      (2): ResidualBlock(\n        (layer): Sequential(\n          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))\n        (pooling): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n      )\n      (3): ResidualBlock(\n        (layer): Sequential(\n          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Identity()\n        (pooling): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n      )\n      (4): ResidualBlock(\n        (layer): Sequential(\n          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Identity()\n        (pooling): AvgPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0)\n      )\n    )\n    (decoder_blocks): ModuleList(\n      (0): TemporalBlock(\n        (convolution_1): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_1): ELU(alpha=1.0)\n        (convolution_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_2): ELU(alpha=1.0)\n        (residual_mapping): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))\n        (upsample): Upsample(scale_factor=2.0, mode=bilinear)\n      )\n      (1): TemporalBlock(\n        (convolution_1): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_1): ELU(alpha=1.0)\n        (convolution_2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_2): ELU(alpha=1.0)\n        (residual_mapping): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))\n        (upsample): Upsample(scale_factor=2.0, mode=bilinear)\n      )\n      (2): TemporalBlock(\n        (convolution_1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_1): ELU(alpha=1.0)\n        (convolution_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_2): ELU(alpha=1.0)\n        (residual_mapping): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))\n        (upsample): Upsample(scale_factor=2.0, mode=bilinear)\n      )\n      (3): TemporalBlock(\n        (convolution_1): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_1): ELU(alpha=1.0)\n        (convolution_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (activation_2): ELU(alpha=1.0)\n        (residual_mapping): Conv2d(112, 16, kernel_size=(1, 1), stride=(1, 1))\n        (upsample): Upsample(scale_factor=2.0, mode=bilinear)\n      )\n    )\n    (super_resolution_blocks): ModuleList(\n      (0): SuperResolutionBlock(\n        (layers): Sequential(\n          (0): ModulatedDeformConvPack(\n            (conv_offset_mask): Conv2d(48, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          )\n          (1): ELU(alpha=1.0)\n          (2): Upsample(scale_factor=2.0, mode=bilinear)\n          (3): ModulatedDeformConvPack(\n            (conv_offset_mask): Conv2d(8, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          )\n          (4): ELU(alpha=1.0)\n        )\n        (residual_mapping): Sequential(\n          (0): Conv2d(48, 8, kernel_size=(1, 1), stride=(1, 1))\n          (1): Upsample(scale_factor=2.0, mode=bilinear)\n        )\n        (output_layer): Identity()\n      )\n      (1): SuperResolutionBlock(\n        (layers): Sequential(\n          (0): ModulatedDeformConvPack(\n            (conv_offset_mask): Conv2d(40, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          )\n          (1): ELU(alpha=1.0)\n          (2): Upsample(scale_factor=2.0, mode=bilinear)\n          (3): ModulatedDeformConvPack(\n            (conv_offset_mask): Conv2d(18, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n          )\n          (4): ELU(alpha=1.0)\n        )\n        (residual_mapping): Sequential(\n          (0): Conv2d(40, 18, kernel_size=(1, 1), stride=(1, 1))\n          (1): Upsample(scale_factor=2.0, mode=bilinear)\n        )\n        (output_layer): Identity()\n      )\n    )\n  )\n)", "w_fft_adversarial": "0.01", "generator_loss": "NonSaturatingLogisticGeneratorLoss", "fft_discriminator_network": "DataParallel(\n  (module): FFTDiscriminator(\n    (input_block): InputBlock(\n      (learnable_downsampling): Conv2d(36, 36, kernel_size=(4, 4), stride=(4, 4))\n      (bilinear_downsampling): Upsample(scale_factor=0.25, mode=bilinear)\n    )\n    (blocks): ModuleList(\n      (0): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(12, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(12, 64, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (1): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(64, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(64, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (2): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(256, 256, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (3): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(256, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(256, 128, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n      (4): DiscriminatorBlock(\n        (layers): Sequential(\n          (0): Conv3d(128, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (1): ELU(alpha=1.0)\n          (2): Conv3d(1, 1, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n          (3): ELU(alpha=1.0)\n        )\n        (residual_mapping): Conv3d(128, 1, kernel_size=(1, 1, 1), stride=(1, 1, 1))\n        (pooling): AvgPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2), padding=0)\n      )\n    )\n    (final_linear): Linear(in_features=256, out_features=1, bias=True)\n  )\n)", "vgg_19": "DataParallel(\n  (module): VGG19(\n    (vgg_19_features): ModuleList(\n      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): ReLU(inplace)\n      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (3): ReLU(inplace)\n      (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (6): ReLU(inplace)\n      (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (8): ReLU(inplace)\n      (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (11): ReLU(inplace)\n      (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (13): ReLU(inplace)\n      (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (15): ReLU(inplace)\n      (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (17): ReLU(inplace)\n      (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (20): ReLU(inplace)\n      (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (22): ReLU(inplace)\n      (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (24): ReLU(inplace)\n      (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (26): ReLU(inplace)\n      (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (29): ReLU(inplace)\n      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    )\n  )\n)", "loss_function": "AdaptiveRobustLoss(\n  (loss_function): AdaptiveLossFunction()\n)", "resample": "DataParallel(\n  (module): Resample2d()\n)", "w_adversarial": "0.01", "discriminator_network_optimizer": "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.1, 0.95)\n    eps: 1e-08\n    lr: 0.0001\n    weight_decay: 0\n)", "pwc_net": "DataParallel(\n  (module): PWCNet(\n    (conv1a): Sequential(\n      (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv1aa): Sequential(\n      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv1b): Sequential(\n      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2a): Sequential(\n      (0): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2aa): Sequential(\n      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2b): Sequential(\n      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3a): Sequential(\n      (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3aa): Sequential(\n      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3b): Sequential(\n      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4a): Sequential(\n      (0): Conv2d(64, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4aa): Sequential(\n      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4b): Sequential(\n      (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5a): Sequential(\n      (0): Conv2d(96, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5aa): Sequential(\n      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5b): Sequential(\n      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6aa): Sequential(\n      (0): Conv2d(128, 196, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6a): Sequential(\n      (0): Conv2d(196, 196, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6b): Sequential(\n      (0): Conv2d(196, 196, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (corr): Correlation()\n    (leakyRELU): LeakyReLU(negative_slope=0.1)\n    (conv6_0): Sequential(\n      (0): Conv2d(81, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6_1): Sequential(\n      (0): Conv2d(209, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6_2): Sequential(\n      (0): Conv2d(337, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6_3): Sequential(\n      (0): Conv2d(433, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv6_4): Sequential(\n      (0): Conv2d(497, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (predict_flow6): Conv2d(529, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv6): ConvTranspose2d(2, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (upfeat6): ConvTranspose2d(529, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (conv5_0): Sequential(\n      (0): Conv2d(213, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5_1): Sequential(\n      (0): Conv2d(341, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5_2): Sequential(\n      (0): Conv2d(469, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5_3): Sequential(\n      (0): Conv2d(565, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv5_4): Sequential(\n      (0): Conv2d(629, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (predict_flow5): Conv2d(661, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv5): ConvTranspose2d(2, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (upfeat5): ConvTranspose2d(661, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (conv4_0): Sequential(\n      (0): Conv2d(181, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4_1): Sequential(\n      (0): Conv2d(309, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4_2): Sequential(\n      (0): Conv2d(437, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4_3): Sequential(\n      (0): Conv2d(533, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv4_4): Sequential(\n      (0): Conv2d(597, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (predict_flow4): Conv2d(629, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv4): ConvTranspose2d(2, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (upfeat4): ConvTranspose2d(629, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (conv3_0): Sequential(\n      (0): Conv2d(149, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3_1): Sequential(\n      (0): Conv2d(277, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3_2): Sequential(\n      (0): Conv2d(405, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3_3): Sequential(\n      (0): Conv2d(501, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv3_4): Sequential(\n      (0): Conv2d(565, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (predict_flow3): Conv2d(597, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv3): ConvTranspose2d(2, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (upfeat3): ConvTranspose2d(597, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (conv2_0): Sequential(\n      (0): Conv2d(117, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2_1): Sequential(\n      (0): Conv2d(245, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2_2): Sequential(\n      (0): Conv2d(373, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2_3): Sequential(\n      (0): Conv2d(469, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (conv2_4): Sequential(\n      (0): Conv2d(533, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (predict_flow2): Conv2d(565, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (deconv2): ConvTranspose2d(2, 2, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n    (dc_conv1): Sequential(\n      (0): Conv2d(565, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv2): Sequential(\n      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv3): Sequential(\n      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv4): Sequential(\n      (0): Conv2d(128, 96, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv5): Sequential(\n      (0): Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(16, 16), dilation=(16, 16))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv6): Sequential(\n      (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): LeakyReLU(negative_slope=0.1)\n    )\n    (dc_conv7): Conv2d(32, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n)", "discriminator_loss": "NonSaturatingLogisticDiscriminatorLoss()"}